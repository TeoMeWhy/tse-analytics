-- Databricks notebook source
DROP TABLE IF EXISTS silver_tse.sumario_partido;

CREATE TABLE silver_tse.sumario_partido

WITH tb_partido_summary (

  SELECT CASE WHEN SG_PARTIDO LIKE '%PCA%' THEN 'PCA' ELSE SG_PARTIDO END AS SG_PARTIDO,
         CASE WHEN NM_PARTIDO LIKE '%SEM PARTIDO%' THEN 'SEM PARTIDO' ELSE NM_PARTIDO END AS NM_PARTIDO,
         COUNT(*) AS qtCandidatos,
         SUM(CASE WHEN DS_GENERO = 'MASCULINO' THEN 1 ELSE 0 END)/ count(*) AS PCT_MASCULINO,
         SUM(CASE WHEN DS_GENERO = 'FEMININO' THEN 1 ELSE 0 END)/ count(*) AS PCT_FEMININO,
         SUM(CASE WHEN DS_GRAU_INSTRUCAO = 'LÊ E ESCREVE' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_LE_ESCREVE,
         SUM(CASE WHEN DS_GRAU_INSTRUCAO = 'ENSINO FUNDAMENTAL INCOMPLETO' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_FUNDAMENTAL_INCOMPLETO,
         SUM(CASE WHEN DS_GRAU_INSTRUCAO = 'ENSINO FUNDAMENTAL COMPLETO' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_FUNDAMENTAL_COMPLETO,
         SUM(CASE WHEN DS_GRAU_INSTRUCAO = 'ENSINO MÉDIO INCOMPLETO' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_MEDIO_INCOMPLETO,
         SUM(CASE WHEN DS_GRAU_INSTRUCAO = 'ENSINO MÉDIO COMPLETO' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_MEDIO_COMPLETO,
         SUM(CASE WHEN DS_GRAU_INSTRUCAO = 'SUPERIOR INCOMPLETO' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_SUPERIOR_INCOMPLETO,
         SUM(CASE WHEN DS_GRAU_INSTRUCAO = 'SUPERIOR COMPLETO' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_SUPERIOR_COMPLETO,
         SUM(CASE WHEN DS_ESTADO_CIVIL = 'SOLTEIRO(A)' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_SOLTEIRO,
         SUM(CASE WHEN DS_ESTADO_CIVIL = 'CASADO(A)' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_CASADO,
         SUM(CASE WHEN DS_ESTADO_CIVIL = 'SEPARADO(A) JUDICIALMENTE' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_SEPARADO_JUDICIALMENTE,
         SUM(CASE WHEN DS_ESTADO_CIVIL = 'DIVORCIADO(A)' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_DIVORCIADO,
         SUM(CASE WHEN DS_ESTADO_CIVIL = 'VIÚVO(A)' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_VIUVO,
         SUM(CASE WHEN DS_COR_RACA = 'AMARELA' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_AMARELA,
         SUM(CASE WHEN DS_COR_RACA = 'BRANCA' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_BRANCA,
         SUM(CASE WHEN DS_COR_RACA = 'INDÍGENA' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_INDiGENA,
         SUM(CASE WHEN DS_COR_RACA = 'PARDA' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_PARDA,
         SUM(CASE WHEN DS_COR_RACA = 'PRETA' THEN 1 ELSE 0 END) / COUNT(*) AS PCT_PRETA,
         AVG(DATEDIFF(TO_DATE(DT_ELEICAO,'d/M/y'), TO_DATE(DT_NASCIMENTO, 'd/M/y')))/365.2425 AS AVG_IDADE

  FROM bronze_tse.consulta_cand_2022_brasil

  GROUP BY 1, 2
),

tb_bem_candidato (

  SELECT SQ_CANDIDATO,
         SUM(CAST(REPLACE(VR_BEM_CANDIDATO, ',', '.') AS FLOAT)) AS vl_bem_candidato
  FROM bronze_tse.bem_candidato_2022_brasil
  GROUP BY SQ_CANDIDATO

),

tb_bem_partido (

  SELECT 
         t2.SG_PARTIDO,
         SUM(vl_bem_candidato) AS VL_TOTAL_BEM_PARTIDO,
         AVG(vl_bem_candidato) AS AVG_BEM_CANDIDATO,
         PERCENTILE(vl_bem_candidato, 0.5) AS MEDIAN_BEM_CANDIDATO,
         MAX(vl_bem_candidato) AS MAX_BEM_CANDIDATO

  FROM tb_bem_candidato AS t1

  LEFT JOIN bronze_tse.consulta_cand_2022_brasil AS t2
  ON t1.SQ_CANDIDATO = t2.SQ_CANDIDATO

  GROUP BY t2.SG_PARTIDO

)

SELECT t1.*,
        t2.VL_TOTAL_BEM_PARTIDO,
        t2.AVG_BEM_CANDIDATO,
        t2.MEDIAN_BEM_CANDIDATO,
        t2.MAX_BEM_CANDIDATO

FROM tb_partido_summary AS t1

LEFT JOIN tb_bem_partido AS t2
on t1.SG_PARTIDO = t2.SG_PARTIDO
;

-- COMMAND ----------

select *

from silver_tse.sumario_partido
